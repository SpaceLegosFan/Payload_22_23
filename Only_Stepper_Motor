// emergency code to just run a stepper motor

#include <AccelStepper.h>
 #define dirPin_x 5
#define stepPin_x 2
#define enable_pin_x 8 // not sure what this is
#define motorInterfaceType 1

float cameraAngle = 0.0;
bool flag = true;
String serialMessage = "";

AccelStepper stepper = AccelStepper(motorInterfaceType, stepPin_x, dirPin_x);
//AccelStepper stepper; // Defaults to AccelStepper::FULL4WIRE (4 pins) on 2, 3, 4, 5
 
void setup()
{  
  Serial.begin(38400);
  pinMode(enable_pin_x, OUTPUT);
  stepper.setEnablePin(enable_pin_x);
  stepper.setPinsInverted(false, false, true);  
  stepper.enableOutputs();
   stepper.setMaxSpeed(300);
    stepper.setAcceleration(500);
   stepper.setSpeed(200);        
}
 
void loop()
{  
   if(flag) {
    spinCameraStepper(-21000);
    flag = false;
   }
}
void spinCameraStepper(int angle) {
cameraAngle = 0;
/*  if (cameraAngle + angle > 180)
    angle = angle - 360;
  else if (cameraAngle + angle < -180)
    angle = angle + 360;
  Serial.println(angle);
  int steps = angle / 1.8;
  cameraAngle += steps * 1.8;
  Serial.println(steps);
  */
  int steps = angle / 1.8;
  stepper.move(steps);
  
  while (stepper.run()) {
  }
}
/*
void updateSerialMessage(){
  while(Serial.available()>0){
    int index = Serial.read();
    if(index >= 32 && index < 127){
      char letter = index;
      serialMessage += letter;
    }
  }
}

void checkSerialMessage() {
  serialMessage.toLowerCase();
  if (serialMessage != "") {
    if (serialMessage == "run motor")
      leadScrewRun();
    else if (serialMessage == "change direction")
      num_deployment_LeadScrew_steps *= -1;
    else if (serialMessage == "print steps")
      Serial.println(num_deployment_LeadScrew_steps);
    else if(serialMessage == "reset steps")
      num_deployment_LeadScrew_steps = DEPLOYSTEPS;
    else if(serialMessage == "reset motor"){
      int temp = num_deployment_LeadScrew_steps;
      num_deployment_LeadScrew_steps = -DEPLOYSTEPS;
      serialMessage = "run motor";
      num_deployment_LeadScrew_steps = temp;
    }
    else if(serialMessage == "step down"){
      int temp = num_deployment_LeadScrew_steps;
      num_deployment_LeadScrew_steps = -50;
      serialMessage = "run motor";
      num_deployment_LeadScrew_steps = temp;
    }
    else if(serialMessage == "step up"){
      int temp = num_deployment_LeadScrew_steps;
      num_deployment_LeadScrew_steps = 50;
      serialMessage = "run motor";
      num_deployment_LeadScrew_steps = temp;
    }
    else if (serialMessage.indexOf("steps =") != -1)
      num_deployment_LeadScrew_steps = serialMessage.substring(serialMessage.indexOf("=") + 2).toInt();
    else if (serialMessage.indexOf("radio string") != -1)
      interpretRadioString(serialMessage);
    else if (serialMessage.indexOf("camera turn") != -1) {
      int angle = serialMessage.substring(serialMessage.indexOf("=") + 2).toInt();
      spinCameraStepper(angle);
    }
    else if (serialMessage.indexOf("radio command") != -1) {
      int command = serialMessage.substring(serialMessage.indexOf("=") + 2).toInt();
      executeRadioCommand(command);
      Serial.print("The radio command is: ");
      Serial.println(command);
    }
    else
      Serial.println("Not a valid command!");
    serialMessage = "";
  }
}
*/

void deploy(int len) {
/*  if (cameraAngle + angle > 180)
    angle = angle - 360;
  else if (cameraAngle + angle < -180)
    angle = angle + 360;
  Serial.println(angle);
  int steps = angle / 1.8;
  cameraAngle += steps * 1.8;
  Serial.println(steps);
  */
/*
  stepper.move(num_deployment_LeadScrew_steps);
  
  while (stepper.run()) {
  }
  */
}
